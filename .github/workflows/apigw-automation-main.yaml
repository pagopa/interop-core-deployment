# .github/workflows/apigw-automation-main.yaml

####
# Analizzo le modifiche ai file images.yaml per determinare se ci sono cambiamenti nei tag dei microservizi esposti.
# ambienti esposti: authorization-server-node, backend-for-frontend, api-gateway, m2m-gateway
# Se ci sono cambiamenti, eseguo la pipeline sub per aprire le PR nei vari ambienti.
#

name: apigw-automation-main

on:
#   push: # TO MODIFIE WHEN PULL_REQUEST IS ENABLED
#     branches:
#       - main
#       # - develop
#       # tags:
#       #   - '*.*.*'
#       #   - '*.*.*-RC*'
#     paths:
#       - 'commons/*/images.yaml'
    workflow_dispatch: # TO REMOVE WHEN PULL_REQUEST IS ENABLED

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_envs: ${{ steps.check-changes.outputs.changed_envs }}

    steps:
      - name: Checkout remote repository
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          fetch-depth: 2

      - name: Check microservices tag changes
        id: check-changes
        run: |
          echo "Checking tag updates for exposed microservices in images.yaml files"

          services_to_watch=("authorization-server-node" "backend-for-frontend" "api-gateway" "m2m-gateway")
          echo "Exposed services: ${services_to_watch[*]}"
          any_changed=false
          envs_changed=()

          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            all_files=$(find commons -type f -path '*/images.yaml' | sort)
            changed_files=$(git diff --name-only HEAD~1 HEAD -- 'commons/*/images.yaml')

            for file in $all_files; do
              if echo "$changed_files" | grep -qx "$file"; then
                file_has_relevant_changes=false

                for svc in "${services_to_watch[@]}"; do
                  tag_before=$(git show HEAD~1:$file | yq '.images.microservices["'"$svc"'"].tag' 2>/dev/null || echo "null")
                  tag_after=$(yq '.images.microservices["'"$svc"'"].tag' "$file" 2>/dev/null || echo "null")
                  if [ "$tag_before" != "$tag_after" ]; then
                    if [ "$file_has_relevant_changes" = false ]; then
                      echo "$file changed:"
                      file_has_relevant_changes=true
                      env_name=$(echo "$file" | awk -F'/' '{print $2}')
                      if [ -n "$env_name" ]; then
                        envs_changed+=("$env_name")
                      fi
                    fi
                    echo "$svc: $tag_before â†’ $tag_after"
                    any_changed=true
                  fi
                done

                if [ "$file_has_relevant_changes" = false ]; then
                  echo "$file changed (no watched services updated)"
                fi
              else
                echo "$file unchanged"
              fi
            done

            envs_changed_uniq=($(printf "%s\n" "${envs_changed[@]}" | sort -u | grep -v '^$'))

            if [ "${#envs_changed_uniq[@]}" -eq 0 ]; then
              envs_json="[]"
            else
              envs_json=$(printf '%s\n' "${envs_changed_uniq[@]}" | jq -R . | jq -s -c .)
            fi

            echo "Environments changed: $envs_json"
            echo "changed_envs=$envs_json" >> $GITHUB_OUTPUT

            if [ "$any_changed" = false ]; then
              echo "No exposed services tag changes detected."
            fi
          else
            echo "No previous commit to compare with."
          fi

  call-reusable:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_envs != '[]' && needs.detect-changes.outputs.changed_envs != '' }}
    strategy:
      matrix:
        env: ${{ fromJson(needs.detect-changes.outputs.changed_envs) }}
    uses: ./.github/workflows/apigw-automation-sub.yaml
    with:
      environment: ${{ matrix.env }}
